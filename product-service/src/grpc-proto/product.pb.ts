// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.5
//   protoc               v3.12.4
// source: grpc-proto/product.proto

/* eslint-disable */
import type { Metadata } from "@grpc/grpc-js";
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "product";

export interface GetProductByNameRequest {
  name: string;
}

export interface ProductResponse {
  id: string;
  name: string;
  price: number;
  isDeleted: boolean;
}

export interface PingRequest {
}

export interface PingResponse {
  message: string;
}

export const PRODUCT_PACKAGE_NAME = "product";

export interface ProductServiceClient {
  getProductByName(request: GetProductByNameRequest, metadata?: Metadata): Observable<ProductResponse>;

  ping(request: PingRequest, metadata?: Metadata): Observable<PingResponse>;
}

export interface ProductServiceController {
  getProductByName(
    request: GetProductByNameRequest,
    metadata?: Metadata,
  ): Promise<ProductResponse> | Observable<ProductResponse> | ProductResponse;

  ping(request: PingRequest, metadata?: Metadata): Promise<PingResponse> | Observable<PingResponse> | PingResponse;
}

export function ProductServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["getProductByName", "ping"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ProductService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const PRODUCT_SERVICE_NAME = "ProductService";
